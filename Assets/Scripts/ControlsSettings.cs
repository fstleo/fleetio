//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Configs/ControlsSettings.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Fleetio.Core.Input
{
    public partial class @ControlsSettings : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ControlsSettings()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsSettings"",
    ""maps"": [
        {
            ""name"": ""BattleFieldControl"",
            ""id"": ""90f9953d-f2cc-4237-ae9e-d65e84213eec"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
            // BattleFieldControl
            m_BattleFieldControl = asset.FindActionMap("BattleFieldControl", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // BattleFieldControl
        private readonly InputActionMap m_BattleFieldControl;
        private IBattleFieldControlActions m_BattleFieldControlActionsCallbackInterface;
        public struct BattleFieldControlActions
        {
            private @ControlsSettings m_Wrapper;
            public BattleFieldControlActions(@ControlsSettings wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_BattleFieldControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BattleFieldControlActions set) { return set.Get(); }
            public void SetCallbacks(IBattleFieldControlActions instance)
            {
                if (m_Wrapper.m_BattleFieldControlActionsCallbackInterface != null)
                {
                }
                m_Wrapper.m_BattleFieldControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                }
            }
        }
        public BattleFieldControlActions @BattleFieldControl => new BattleFieldControlActions(this);
        public interface IBattleFieldControlActions
        {
        }
    }
}
